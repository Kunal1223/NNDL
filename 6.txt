import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import pandas as pd
import os


from tensorflow.keras import mixed_precision
policy = mixed_precision.Policy('mixed_float16')
mixed_precision.set_global_policy(policy)


data_path = "C:\\Users\\Jahnavi Reddy.A\\Downloads\\t8.shakespeare.txt"


import os
current_directory = os.getcwd()
file_name = "t8.shakespeare.txt"
data_path = os.path.join(current_directory, file_name)
print(f"File path: {data_path}")
data = pd.read_fwf(data_path, header=None)


print(data.columns)
data = data.rename(columns={data.columns[0]: 'PlayerLine'})


corpus = data['PlayerLine'].dropna().tolist()
corpus = corpus[:1000]


tokenizer = Tokenizer()
tokenizer.fit_on_texts(corpus)
total_words = len(tokenizer.word_index) + 1


input_sequences = []
for line in corpus:
    token_list = tokenizer.texts_to_sequences([line])[0]
    for i in range(1, len(token_list)):
        n_gram_sequence = token_list[:i+1]
        input_sequences.append(n_gram_sequence)


max_sequence_len = 20
input_sequences = pad_sequences(input_sequences, maxlen=max_sequence_len, padding='pre')


X = input_sequences[:, :-1]
y = input_sequences[:, -1]
y = tf.keras.utils.to_categorical(y, num_classes=total_words)


model = Sequential([
    Embedding(total_words, 50, input_length=max_sequence_len-1),  # Reduced embedding size
    LSTM(100),  # Reduced LSTM units
    Dense(total_words, activation='softmax')
])


model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Check model summary (optional)
model.summary()


model.fit(X, y, epochs=20, batch_size=16, verbose=1)


def predict_next_word(model, tokenizer, text, max_sequence_len):
    # Tokenize and pad the input text
    token_list = tokenizer.texts_to_sequences([text])[0]
    token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')

    # Get the predicted word index
    predicted = np.argmax(model.predict(token_list), axis=-1)

    # Map the predicted index to the word
    for word, index in tokenizer.word_index.items():
        if index == predicted:
            return word
    return ""


input_text = "where are my"

predicted_word = predict_next_word(model, tokenizer, input_text, max_sequence_len)

print(f"Input text: {input_text}")
print(f"Predicted next word: {predicted_word}")